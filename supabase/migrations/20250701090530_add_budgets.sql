create table "public"."budget_audit_logs" (
    "id" bigint generated by default as identity not null,
    "budget_id" bigint not null,
    "action" text not null,
    "changes" jsonb,
    "performed_by" uuid,
    "ip_address" inet,
    "created_at" timestamp with time zone not null default timezone('utc'::text, now())
);


create table "public"."budgets" (
    "id" bigint generated by default as identity not null,
    "budget_name" text not null,
    "project_name" text not null,
    "description" text,
    "start_date" date not null,
    "end_date" date not null,
    "currency_code" text not null,
    "exchange_rate_usd" numeric(8,4) not null,
    "planned_amount" numeric not null,
    "planned_amount_usd" numeric generated always as ((planned_amount / exchange_rate_usd)) stored,
    "status" boolean not null default true,
    "created_by" uuid,
    "created_at" timestamp with time zone not null default timezone('utc'::text, now()),
    "updated_at" timestamp with time zone not null default timezone('utc'::text, now())
);


alter table "public"."budgets" enable row level security;

alter table "public"."product" alter column "unit_price" set data type numeric using "unit_price"::numeric;

CREATE UNIQUE INDEX budget_audit_logs_pkey ON public.budget_audit_logs USING btree (id);

CREATE UNIQUE INDEX budgets_pkey ON public.budgets USING btree (id);

alter table "public"."budget_audit_logs" add constraint "budget_audit_logs_pkey" PRIMARY KEY using index "budget_audit_logs_pkey";

alter table "public"."budgets" add constraint "budgets_pkey" PRIMARY KEY using index "budgets_pkey";

alter table "public"."budget_audit_logs" add constraint "budget_audit_logs_action_check" CHECK ((action = ANY (ARRAY['CREATE'::text, 'UPDATE'::text, 'STATUS_CHANGE'::text, 'DELETE'::text]))) not valid;

alter table "public"."budget_audit_logs" validate constraint "budget_audit_logs_action_check";

alter table "public"."budget_audit_logs" add constraint "budget_audit_logs_budget_id_fkey" FOREIGN KEY (budget_id) REFERENCES budgets(id) not valid;

alter table "public"."budget_audit_logs" validate constraint "budget_audit_logs_budget_id_fkey";

alter table "public"."budget_audit_logs" add constraint "budget_audit_logs_performed_by_fkey" FOREIGN KEY (performed_by) REFERENCES profiles(id) not valid;

alter table "public"."budget_audit_logs" validate constraint "budget_audit_logs_performed_by_fkey";

alter table "public"."budgets" add constraint "budgets_created_by_fkey" FOREIGN KEY (created_by) REFERENCES profiles(id) not valid;

alter table "public"."budgets" validate constraint "budgets_created_by_fkey";

alter table "public"."budgets" add constraint "budgets_currency_code_fkey" FOREIGN KEY (currency_code) REFERENCES product_currency(currency_code) not valid;

alter table "public"."budgets" validate constraint "budgets_currency_code_fkey";

alter table "public"."budgets" add constraint "budgets_exchange_rate_usd_check" CHECK ((exchange_rate_usd > (0)::numeric)) not valid;

alter table "public"."budgets" validate constraint "budgets_exchange_rate_usd_check";

alter table "public"."budgets" add constraint "budgets_planned_amount_check" CHECK ((planned_amount > (0)::numeric)) not valid;

alter table "public"."budgets" validate constraint "budgets_planned_amount_check";

alter table "public"."budgets" add constraint "budgets_status_check" CHECK ((status = ANY (ARRAY['Active'::text, 'Inactive'::text]))) not valid;

alter table "public"."budgets" validate constraint "budgets_status_check";

alter table "public"."budgets" add constraint "chk_valid_dates" CHECK ((start_date <= end_date)) not valid;

alter table "public"."budgets" validate constraint "chk_valid_dates";

grant delete on table "public"."budget_audit_logs" to "anon";

grant insert on table "public"."budget_audit_logs" to "anon";

grant references on table "public"."budget_audit_logs" to "anon";

grant select on table "public"."budget_audit_logs" to "anon";

grant trigger on table "public"."budget_audit_logs" to "anon";

grant truncate on table "public"."budget_audit_logs" to "anon";

grant update on table "public"."budget_audit_logs" to "anon";

grant delete on table "public"."budget_audit_logs" to "authenticated";

grant insert on table "public"."budget_audit_logs" to "authenticated";

grant references on table "public"."budget_audit_logs" to "authenticated";

grant select on table "public"."budget_audit_logs" to "authenticated";

grant trigger on table "public"."budget_audit_logs" to "authenticated";

grant truncate on table "public"."budget_audit_logs" to "authenticated";

grant update on table "public"."budget_audit_logs" to "authenticated";

grant delete on table "public"."budget_audit_logs" to "service_role";

grant insert on table "public"."budget_audit_logs" to "service_role";

grant references on table "public"."budget_audit_logs" to "service_role";

grant select on table "public"."budget_audit_logs" to "service_role";

grant trigger on table "public"."budget_audit_logs" to "service_role";

grant truncate on table "public"."budget_audit_logs" to "service_role";

grant update on table "public"."budget_audit_logs" to "service_role";

grant delete on table "public"."budgets" to "anon";

grant insert on table "public"."budgets" to "anon";

grant references on table "public"."budgets" to "anon";

grant select on table "public"."budgets" to "anon";

grant trigger on table "public"."budgets" to "anon";

grant truncate on table "public"."budgets" to "anon";

grant update on table "public"."budgets" to "anon";

grant delete on table "public"."budgets" to "authenticated";

grant insert on table "public"."budgets" to "authenticated";

grant references on table "public"."budgets" to "authenticated";

grant select on table "public"."budgets" to "authenticated";

grant trigger on table "public"."budgets" to "authenticated";

grant truncate on table "public"."budgets" to "authenticated";

grant update on table "public"."budgets" to "authenticated";

grant delete on table "public"."budgets" to "service_role";

grant insert on table "public"."budgets" to "service_role";

grant references on table "public"."budgets" to "service_role";

grant select on table "public"."budgets" to "service_role";

grant trigger on table "public"."budgets" to "service_role";

grant truncate on table "public"."budgets" to "service_role";

grant update on table "public"."budgets" to "service_role";

create policy "Allow authenticated user access"
on "public"."budgets"
as permissive
for all
to public
using ((auth.role() = 'authenticated'::text))
with check ((auth.role() = 'authenticated'::text));



