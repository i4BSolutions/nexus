create table "public"."budget_allocation" (
    "id" bigint generated by default as identity not null,
    "po_id" bigint not null,
    "allocation_amount" numeric not null,
    "currency_code" character varying(10) not null,
    "exchange_rate_usd" numeric(15,6) not null,
    "equivalent_usd" numeric generated always as ((allocation_amount / exchange_rate_usd)) stored,
    "transfer_evidence" text not null,
    "status" text default 'Pending'::text,
    "created_at" timestamp with time zone not null default timezone('utc'::text, now()),
    "updated_at" timestamp with time zone not null default timezone('utc'::text, now())
);


alter table "public"."budget_allocations" alter column "created_at" set default now();

alter table "public"."budget_allocations" alter column "created_at" drop not null;

alter table "public"."budget_invoices" alter column "created_at" set default now();

alter table "public"."budget_invoices" alter column "created_at" drop not null;

CREATE UNIQUE INDEX budget_allocation_pkey ON public.budget_allocation USING btree (id);

alter table "public"."budget_allocation" add constraint "budget_allocation_pkey" PRIMARY KEY using index "budget_allocation_pkey";

alter table "public"."budget_allocation" add constraint "budget_allocation_allocation_amount_check" CHECK ((allocation_amount > (0)::numeric)) not valid;

alter table "public"."budget_allocation" validate constraint "budget_allocation_allocation_amount_check";

alter table "public"."budget_allocation" add constraint "budget_allocation_exchange_rate_usd_check" CHECK ((exchange_rate_usd > (0)::numeric)) not valid;

alter table "public"."budget_allocation" validate constraint "budget_allocation_exchange_rate_usd_check";

alter table "public"."budget_allocation" add constraint "budget_allocation_po_id_fkey" FOREIGN KEY (po_id) REFERENCES purchase_order(id) not valid;

alter table "public"."budget_allocation" validate constraint "budget_allocation_po_id_fkey";

alter table "public"."budget_allocation" add constraint "budget_allocation_status_check" CHECK ((status = ANY (ARRAY['Pending'::text, 'Paid'::text, 'Canceled'::text]))) not valid;

alter table "public"."budget_allocation" validate constraint "budget_allocation_status_check";

grant delete on table "public"."budget_allocation" to "anon";

grant insert on table "public"."budget_allocation" to "anon";

grant references on table "public"."budget_allocation" to "anon";

grant select on table "public"."budget_allocation" to "anon";

grant trigger on table "public"."budget_allocation" to "anon";

grant truncate on table "public"."budget_allocation" to "anon";

grant update on table "public"."budget_allocation" to "anon";

grant delete on table "public"."budget_allocation" to "authenticated";

grant insert on table "public"."budget_allocation" to "authenticated";

grant references on table "public"."budget_allocation" to "authenticated";

grant select on table "public"."budget_allocation" to "authenticated";

grant trigger on table "public"."budget_allocation" to "authenticated";

grant truncate on table "public"."budget_allocation" to "authenticated";

grant update on table "public"."budget_allocation" to "authenticated";

grant delete on table "public"."budget_allocation" to "service_role";

grant insert on table "public"."budget_allocation" to "service_role";

grant references on table "public"."budget_allocation" to "service_role";

grant select on table "public"."budget_allocation" to "service_role";

grant trigger on table "public"."budget_allocation" to "service_role";

grant truncate on table "public"."budget_allocation" to "service_role";

grant update on table "public"."budget_allocation" to "service_role";


